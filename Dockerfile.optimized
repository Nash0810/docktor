# BP001 - Using latest tag (should be pinned)
FROM python:latest
# BP001 - Another unpinned version
FROM node:latest as builder
# PERF007 - First apt-get update
RUN apt-get update
# PERF004 - Installing unnecessary packages
RUN apt-get update && apt-get install -y git curl wget gcc g++ build-essential vim nano \
    && rm -rf /var/lib/apt/lists/*
# PERF007 - Redundant apt-get update
RUN apt-get update && apt-get install -y python3-dev \
    && rm -rf /var/lib/apt/lists/*
# PERF005 - Using apt-get upgrade (non-deterministic)
RUN apt-get upgrade -y
# PERF002 - Missing apt cleanup
RUN apt-get update && apt-get install -y postgresql-client redis-tools \
    && rm -rf /var/lib/apt/lists/*
# Multiple consecutive RUN commands (PERF001)
RUN mkdir -p /app/logs \
    && mkdir -p /app/data \
    && mkdir -p /app/config \
    && chmod 755 /app \
    && chown root:root /app
# BP008 - Non-absolute WORKDIR
WORKDIR app
# PERF003 - Cache busting copy before dependency installation
COPY . /app/
# SEC001 - Using ADD instead of COPY
COPY requirements.txt /app/
COPY package.json /app/
# Now installing dependencies after copying everything (cache busting)
RUN pip install -r requirements.txt \
    && npm install
# More consecutive RUNs with sudo (unnecessary)
RUN mkdir /var/log/myapp \
    && touch /var/log/myapp/app.log \
    && chown www-data:www-data /var/log/myapp/app.log
# SEC003 - Environment variables with secrets
ENV DATABASE_PASSWORD=supersecret123 \
    API_KEY=sk-1234567890abcdef \
    SECRET_TOKEN=github_pat_123456 \
    ADMIN_PASSWORD=admin123 \
    JWT_SECRET=my-jwt-secret-key
# Multiple ENV statements that could be combined
ENV NODE_ENV=production \
    PORT=3000 \
    DEBUG=false \
    LOG_LEVEL=info
# Multiple LABEL statements that could be combined
LABEL maintainer="developer@example.com" \
    version="1.0.0" \
    description="My application" \
    org.opencontainers.image.source="https://github.com/user/repo"
# Multiple ARG statements that could be combined
ARG BUILD_DATE \
    VERSION \
    GIT_COMMIT
# BP003 - EXPOSE without protocol
EXPOSE 3000/tcp
EXPOSE 8080/tcp
EXPOSE 5432/tcp
# BP002 - Missing HEALTHCHECK (we have EXPOSE but no HEALTHCHECK)
# PERF006 - Another broad copy
COPY . /app/static/
# More cache busting
COPY config/ /app/config/
RUN pip install --upgrade pip setuptools
# BP006 - Invalid COPY --from (nonexistent stage)
COPY --from=nonexistent /app/dist ./dist
# SEC002 - Running as root (no USER instruction)
# SEC004 - No --chown on COPY commands when we should have USER
# BP007 - Shell form commands instead of exec form
CMD python app.py && npm start
# More shell form
ENTRYPOINT python -m gunicorn app:app
# Additional problems for good measure
RUN apt-get update \
    && apt-get install -y htop tree \
    && curl -o /tmp/script.sh https://example.com/script.sh \
    && chmod +x /tmp/script.sh \
    && /tmp/script.sh \
    && rm -rf /var/lib/apt/lists/*
# PERF006 - More broad copying
COPY . /app/backup/
# More ADD usage
COPY https://github.com/user/repo/archive/main.tar.gz /tmp/
# More sudo usage
RUN service nginx start \
    && systemctl enable postgresql
# More unpinned images in multi-stage
FROM alpine:latest as final
RUN apk update && apk add --no-cache curl
# More missing protocols
EXPOSE 9000/tcp
EXPOSE 6379/tcp
# Final stage without cleanup
RUN apk add git make gcc
COPY --from=builder /app/dist /app/
CMD ["sh", "-c", "python app.py"]