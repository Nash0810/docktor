name: CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

defaults:
  run:
    shell: bash

jobs:
  test:
    name: Test with Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker on Windows
        if: matrix.os == 'windows-latest'
        run: |
          # Try to switch to Linux containers, but continue if it fails
          try {
            & "C:\Program Files\Docker\Docker\DockerCli.exe" -SwitchLinuxEngine
            Start-Sleep -Seconds 10
            docker version
            echo "Successfully switched to Linux containers"
          } catch {
            echo "Could not switch to Linux containers, will use Windows containers or skip Docker tests"
            echo "Error: $_"
          }
        shell: powershell
        continue-on-error: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install build tools first
          python -m pip install build wheel setuptools
          # Check if pyproject.toml or setup.py exists
          if [ -f pyproject.toml ]; then
            pip install -e .[dev]
          elif [ -f setup.py ]; then
            pip install -e .[dev]
          else
            # Fallback to requirements files
            if [ -f requirements-dev.txt ]; then
              pip install -r requirements-dev.txt
            fi
            if [ -f requirements.txt ]; then
              pip install -r requirements.txt
            fi
            # Install the package in development mode
            pip install -e .
          fi

      - name: Verify Docker availability
        run: |
          docker --version || echo "Docker not available"
          docker info || echo "Docker daemon not running"
        continue-on-error: true

      - name: Run linting
        run: |
          # Run linting if available
          if command -v flake8 &> /dev/null; then
            flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
          fi
          if command -v black &> /dev/null; then
            black --check src/ tests/
          fi
          if command -v isort &> /dev/null; then
            isort --check-only src/ tests/
          fi
        continue-on-error: true

      - name: Run type checking
        run: |
          if command -v mypy &> /dev/null; then
            mypy src/
          fi
        continue-on-error: true

      - name: Run tests
        run: |
          # Run tests with coverage, allowing Docker tests to be skipped on Windows
          pytest --cov=src/docktor --cov-report=xml --cov-report=term-missing -v
        env:
          PYTHONPATH: ${{ github.workspace }}/src
          DOCKTOR_FORCE_PRETTY: "false"

          PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  docker-tests:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run Docker-specific tests
        run: |
          # Run only tests that require Docker
          pytest tests/ -k "docker or benchmark" -v
        env:
          PYTHONPATH: ${{ github.workspace }}/src

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
